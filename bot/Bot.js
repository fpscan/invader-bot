const {Client, Attachment, RichEmbed, leveling} = require('discord.js');
const bot = new Client();

const token = ''; //safety precautions

const PREFIX = '-';

bot.on('ready', () =>{
  bot.user.setActivity('RetroArch')
  console.log('This bot is online');   
})


bot.on('message', message=>{
    
    let args = message.content.substring(PREFIX.length).split(" ");

    switch(args[0]){
        case 'help':
            message.reply('I sent you a DM, check it out!');
            message.author.send("`-bios <core name>` will give you the names of the required bios files and the md5sum for the core you specified. > example usage ```-bios 4do``` `-stable <system name>` will give you a download link of the stable version for the operating system you specified. > example usage ```-stable windows10x64 -stable windows10x64zip -stable vita``` `-nightly <system name>` will give you a download link of the latest-build version for the operating system you specified. example usage ```-nightly windows10x64  -nightly wiiu``` `-<system name> <core name>` will give you a download link of the latest-core build for the operating system you specified. example usage ```-windowsx86 bnes  -linuxx86 redbook -ios atari800 -iosarm64 bsnes``` ***InvaderBot still WIP, it will improve over time. > Please let me know if something not working or want give your feedbacks to me @gadsby#6752***")
            break;
        case 'bios':
            if(args[1] === 'psx'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" PS1 JP BIOS - Required for JP games ```scph5500.bin md5sum 8dd7d5296a650fac7319bce665a6a53c``` PS1 US BIOS - Required for US games ```scph5501.bin  md5sum 490f666e1afb15b7362b406ed1cea246``` PS1 EU BIOS - Required for EU games ```scph5502.bin md5sum 32736f17079d0b2b7024407c39bd3050``` ")
            }
            if(args[1] === '4do'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Panasonic FZ-1 ```panafz1.bin   md5sum f47264dd47fe30f73ab3c010015c155b``` Panasonic FZ-10 ```panafz10.bin  md5sum 51f2f43ae2f3508a14d9f56597e2d3ce``` Panasonic FZ-10 [RSA Patch] ```panafz10-patched.bin md5sum 1477bda80dc33731a65468c1f5bcbee9``` Panasonic FZ-10-E [Anvil] ```panafz10e-anvil.bin md5sum a48e6746bd7edec0f40cff078f0bb19f``` Panasonic FZ-10-E [Anvil RSA Patch] ```panafz10e-anvil-patched.bin md5sum cf11bbb5a16d7af9875cca9de9a15e09``` Goldstar GDO-101M ```goldstar.bin md5sum 8639fd5e549bd6238cfee79e3e749114``` Sanyo IMP-21J TRY ```sanyotry.bin md5sum 35fa1a1ebaaeea286dc5cd15487c13ea``` Shootout At Old Tucson ```3do_arcade_saot.bin md5sum 8970fc987ab89a7f64da9f8a8c4333ff``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/4do/ ")
            }
            if(args[1] === '4do_everyone'){
                message.channel.send(' Panasonic FZ-1 ```panafz1.bin   md5sum f47264dd47fe30f73ab3c010015c155b``` Panasonic FZ-10 ```panafz10.bin  md5sum 51f2f43ae2f3508a14d9f56597e2d3ce``` Panasonic FZ-10 [RSA Patch] ```panafz10-patched.bin md5sum 1477bda80dc33731a65468c1f5bcbee9``` Panasonic FZ-10-E [Anvil] ```panafz10e-anvil.bin md5sum a48e6746bd7edec0f40cff078f0bb19f``` Panasonic FZ-10-E [Anvil RSA Patch] ```panafz10e-anvil-patched.bin md5sum cf11bbb5a16d7af9875cca9de9a15e09``` Goldstar GDO-101M ```goldstar.bin md5sum 8639fd5e549bd6238cfee79e3e749114``` Sanyo IMP-21J TRY ```sanyotry.bin md5sum 35fa1a1ebaaeea286dc5cd15487c13ea``` Shootout At Old Tucson ```3do_arcade_saot.bin md5sum 8970fc987ab89a7f64da9f8a8c4333ff``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/4do/ ")
            }        
            if(args[1] === 'atari800'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' 5200 BIOS - Required ```5200.rom    md5sum 281f20ea4320404ec820fb7ec0693b38``` Atari XL/XE OS BIOS - Required ```ATARIXL.ROM    md5sum 06daac977823773a3eea3422fd26a703``` BASIC interpreter BIOS - Required ```ATARIBAS.ROM md5sum 0bac0c6a50104045d902df4503a4c30b``` Atari 400/800 PAL BIOS - Required ```ATARIOSA.ROM md5sum eb1f32f5d9f382db1bbfb8d7f9cb343a``` Atari 400/800 NTSC - Required ```ATARIOSB.ROM md5sum a3e8d617c95d08031fe1b20d541434b2``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/atari800/ ")
            }
            if(args[1] === 'atari800_everyone'){
                message.channel.send('5200 BIOS - Required ```5200.rom    md5sum 281f20ea4320404ec820fb7ec0693b38``` Atari XL/XE OS BIOS - Required ```ATARIXL.ROM    md5sum 06daac977823773a3eea3422fd26a703``` BASIC interpreter BIOS - Required ```ATARIBAS.ROM md5sum 0bac0c6a50104045d902df4503a4c30b``` Atari 400/800 PAL BIOS - Required ```ATARIOSA.ROM md5sum eb1f32f5d9f382db1bbfb8d7f9cb343a``` Atari 400/800 NTSC - Required ```ATARIOSB.ROM md5sum a3e8d617c95d08031fe1b20d541434b2``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/atari800/ ")
            }        
            if(args[1] === 'beetlegba'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Game Boy Advance BIOS - Optional ```gba_bios.bin    md5sum a860e8c0b6d573d191e4ec7db1b1e4f6``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_gba/ ");
            }
            if(args[1] === 'beetlegba_everyone'){
                message.channel.send(' Game Boy Advance BIOS - Optional ```gba_bios.bin    md5sum a860e8c0b6d573d191e4ec7db1b1e4f6``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_gba/ ");
            }
            if(args[1] === 'beetlehandy'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Lynx Boot Image - Required ```lynxboot.img    md5sum fcd403db69f54290b51035d82f835e7b``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_handy/ ");
            }
            if(args[1] === 'beetlehandy_everyone'){
                message.channel.send(' Lynx Boot Image - Required ```lynxboot.img    md5sum fcd403db69f54290b51035d82f835e7b``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_handy/ ");
            }
            if(args[1] === 'beetlepcfx'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' PC-FX BIOS v1.00 - 2 Sep 1994 - Required ```pcfx.rom    md5sum 08e36edbea28a017f79f8d4f7ff9b6d7``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_pc_fx/ ");
            }
            if(args[1] === 'beetlepcfx_everyone'){
                message.channel.send(' PC-FX BIOS v1.00 - 2 Sep 1994 - Required ```pcfx.rom    md5sum 08e36edbea28a017f79f8d4f7ff9b6d7``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_pc_fx/ ");
            }
            if(args[1] === 'beetlesaturn'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Saturn JP BIOS - Required for JP games ```sega_101.bin    md5sum 08e36edbea28a017f79f8d4f7ff9b6d7``` Saturn US/EU BIOS - Required for US/EU games ```mpr-17933.bin    md5sum 3240872c70984b6cbfda1586cab68dbe``` The King of Fighters 95 ROM Cartridge - Required for this game ```mpr-18811-mx.ic1    md5sum 255113ba943c92a54facd25a10fd780c``` Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game ```mpr-19367-mx.ic1    md5sum 1cd19988d1d72a3e7caa0b73234c96b4```');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_saturn/ ");
            }
            if(args[1] === 'beetlesaturn_everyone'){
                message.channel.send(' Saturn JP BIOS - Required for JP games ```sega_101.bin    md5sum 08e36edbea28a017f79f8d4f7ff9b6d7``` Saturn US/EU BIOS - Required for US/EU games ```mpr-17933.bin    md5sum 3240872c70984b6cbfda1586cab68dbe``` The King of Fighters 95 ROM Cartridge - Required for this game ```mpr-18811-mx.ic1    md5sum 255113ba943c92a54facd25a10fd780c``` Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game ```mpr-19367-mx.ic1    md5sum 1cd19988d1d72a3e7caa0b73234c96b4```');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_saturn/ ");
            }
            if(args[1] === 'beetlesgx'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Super CD-ROM2 System V3.xx - Required ```syscard3.pce    md5sum 38179df8f4ac870017db21ebcbf53114``` CD-ROM System V2.xx - Optional ``` syscard2.pce ``` CD-ROM System V1.xx - Optional ``` syscard1.pce ``` Game Express CD Card - Optional  ``` gexpress.pce ```');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_saturn/ ");
            }
            if(args[1] === 'beetlesgx_everyone'){
                message.channel.send(' Super CD-ROM2 System V3.xx - Required ```syscard3.pce    md5sum 38179df8f4ac870017db21ebcbf53114``` CD-ROM System V2.xx - Optional ``` syscard2.pce ``` CD-ROM System V1.xx - Optional ``` syscard1.pce ``` Game Express CD Card - Optional  ``` gexpress.pce ```');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/beetle_saturn/ ");
            }        
            if(args[1] === 'bluemsx'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' The blueMSX core requires the `Databases` and `Machines` folders from a full installation of blueMSX. You can download the `Databases` and `Machines` folders from an official full standalone blueMSX emulator installation. Get blueMSXv282full.zip near the bottom of the page. http://bluemsx.msxblue.com/download.html');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/bluemsx/ ");
            }
            if(args[1] === 'bluemsx_everyone'){
                message.channel.send(' The blueMSX core requires the `Databases` and `Machines` folders from a full installation of blueMSX. You can download the `Databases` and `Machines` folders from an official full standalone blueMSX emulator installation. Get blueMSXv282full.zip near the bottom of the page. http://bluemsx.msxblue.com/download.html');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/bluemsx/ ");
            }
            if(args[1] === 'bnes'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/bnes/ ");
            }
            if(args[1] === 'bnes_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/bnes/ ");
            }
            if(args[1] === 'bsnes'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/bsnes_accuracy/ ");
            }
            if(args[1] === 'bsnes_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/bsnes_accuracy/ ");
            }
            if(args[1] === 'caprice32'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/caprice32/ ");
            }
            if(args[1] === 'caprice32_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/caprice32/ ");
            }
            if(args[1] === 'chailove'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/chailove/ ");
            }
            if(args[1] === 'chailove_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/chailove/ ");
            }
            if(args[1] === 'citra'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/citra/ ");
            }  
            if(args[1] === 'citra_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/citra/ ");
            }
            if(args[1] === 'craft'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/craft/");
            }
            if(args[1] === 'craft_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/craft/ ");
            }
            if(args[1] === 'crocods'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/crocods/");
            }
            if(args[1] === 'crocods_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/crocods/ ");
            }
            if(args[1] === 'desmume'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' NDS Firmware - Optional```firmware.bin    md5sum 145eaef5bd3037cbc247c213bb3da1b3``` ARM7 BIOS - Optional ``` bios7.bin	md5sum df692a80a5b1bc90728bc3dfc76cd948 ``` ARM9 BIOS - Optional ``` bios9.bin md5sum a392174eb3e572fed6447e956bde4b25 ``` ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/desmume/ ");
            }
            if(args[1] === 'desmume_everyone'){
                message.channel.send(' NDS Firmware - Optional```firmware.bin    md5sum 145eaef5bd3037cbc247c213bb3da1b3``` ARM7 BIOS - Optional ``` bios7.bin	md5sum df692a80a5b1bc90728bc3dfc76cd948 ``` ARM9 BIOS - Optional ``` bios9.bin md5sum a392174eb3e572fed6447e956bde4b25 ``` ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/desmume/ ");
            }
            if(args[1] === 'dinothawr'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/dinothawr/");
            }
            if(args[1] === 'dinothawr_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/dinothawr/");
            }
            if(args[1] === 'dolphin'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/dolphin/");
            }
            if(args[1] === 'dolphin_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/dolphin/");
            }
            if(args[1] === 'dosbox'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/dosbox/");
            }
            if(args[1] === 'dosbox_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/dosbox/");
            }
            if(args[1] === 'dummycore'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/dummy/");
            }
            if(args[1] === 'dummycore_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/dummy/");
            }
            if(args[1] === 'stonesoup'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" 1. Create an empty directory to hold game data. 2. Copy https://github.com/libretro/crawl-ref/tree/master/crawl-ref/source/dat into the root of game directory. 3. Create a file named game.crawlrc in the root of the game directory. 4. Load game.crawlrc with the Dungeon Crawl Stone Soup core.")
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/stone_soup/ ");
            }
            if(args[1] === 'stonesoup_everyone'){
                message.channel.send(" 1. Create an empty directory to hold game data. 2. Copy https://github.com/libretro/crawl-ref/tree/master/crawl-ref/source/dat into the root of game directory. 3. Create a file named game.crawlrc in the root of the game directory. 4. Load game.crawlrc with the Dungeon Crawl Stone Soup core.")
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/stone_soup/ ");
            }
            if(args[1] === 'easyrpg'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/easyrpg/");
            }
            if(args[1] === 'easyrpg_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/easyrpg/");
            }
            if(args[1] === 'eightyone'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/eightyone/");
            }
            if(args[1] === 'eightyone_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/eightyone/");
            }
            if(args[1] === 'emuxchip8'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_chip8/");
            }
            if(args[1] === 'emuxchip8_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_chip8/");
            }
            if(args[1] === 'emuxgb'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_gb/");
            }
            if(args[1] === 'emuxgb_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_gb/");
            }
            if(args[1] === 'emuxnes'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_nes/");
            }
            if(args[1] === 'emuxnes_everyone'){
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_nes/");
            }
            if(args[1] === 'emuxsms'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Master System BIOS - Required ``` bios.sms md5sum 840481177270d5642a14ca71ee72844c ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_sms/");              
            }
            if(args[1] === 'emuxsms_everyone'){
                message.channel.send(" Master System BIOS - Required ``` bios.sms md5sum 840481177270d5642a14ca71ee72844c ```");
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/emux_sms/");
            }
            if(args[1] === 'fceumm'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Family Computer Disk System BIOS - Required for Famicom Disk System emulation ``` disksys.rom md5sum ca30b50f880eb660a320674ed365ef7a ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/fceumm/");              
            }
            if(args[1] === 'fceumm_everyone'){
                message.channel.send(" Family Computer Disk System BIOS - Required for Famicom Disk System emulation ``` disksys.rom md5sum ca30b50f880eb660a320674ed365ef7a ```");
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/fceumm/");              
            }
            if(args[1] === 'flycast'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" A MAME format BIOS file (naomi.zip) from a recent (post 0.154) MAME build can be used instead of ```naomi.bin``` Dreamcast BIOS - Requried ``` dc/dc_boot.bin md5sum e10c53c2f8b90bab96ead2d368858623 ``` Date/Time/Language - Required ``` dc/dc_flash.bin md5sum 0a93f7940c455905bea6e392dfde92a4 ``` NAOMI Bios - Optional/Required for NAOMI Games ``` dc/naomi.bin md5sum 3bffafac42a7767d8dcecf771f5552ba ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/flycast/");              
            }
            if(args[1] === 'flycast_everyone'){
                message.channel.send(" A MAME format BIOS file (naomi.zip) from a recent (post 0.154) MAME build can be used instead of ```naomi.bin``` Dreamcast BIOS - Requried ``` dc/dc_boot.bin md5sum e10c53c2f8b90bab96ead2d368858623 ``` Date/Time/Language - Required ``` dc/dc_flash.bin md5sum 0a93f7940c455905bea6e392dfde92a4 ``` NAOMI Bios - Optional/Required for NAOMI Games ``` dc/naomi.bin md5sum 3bffafac42a7767d8dcecf771f5552ba ```");
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/flycast/");              
            }
            if(args[1] === 'fuse'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" The BIOS for the last four machines need to be in a directory named 'fuse' in RetroArch's System directory. ")
                message.author.send(" Spectrum 48K Spectrum 48K (NTSC) Spectrum 128K Spectrum +2 Spectrum +2A Spectrum +3 Spectrum +3e Spectrum SE Timex TC2048 Timex TC2068 Timex TS2068 Spectrum 16K Pentagon 128K ")
                message.author.send(" Pentagon 128K ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/trdos.rom``` ");
                message.author.send(" Pentagon 512k ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/gluck.rom``````fuse/trdos.rom``` ");
                message.author.send(" Pentagon 1024 ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/gluck.rom``````fuse/trdos.rom``` ");  
                message.author.send(" Pentagon 256k ROM - Required ```fuse/256s-0.rom``````fuse/256s-1.rom``````fuse/256s-2.rom``````fuse/256s-3.rom``` "); 
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/fuse/");              
            }
            if(args[1] === 'fuse_everyone'){
                message.channel.send(" The BIOS for the last four machines need to be in a directory named 'fuse' in RetroArch's System directory. ")
                message.channel.send(" Spectrum 48K Spectrum 48K (NTSC) Spectrum 128K Spectrum +2 Spectrum +2A Spectrum +3 Spectrum +3e Spectrum SE Timex TC2048 Timex TC2068 Timex TS2068 Spectrum 16K Pentagon 128K ")
                message.channel.send(" Pentagon 128K ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/trdos.rom``` ");
                message.channel.send(" Pentagon 512k ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/gluck.rom``````fuse/trdos.rom``` ");
                message.channel.send(" Pentagon 1024 ROM - Required ```fuse/128p-0.rom``````fuse/128p-1.rom``````fuse/gluck.rom``````fuse/trdos.rom``` ");  
                message.channel.send(" Pentagon 256k ROM - Required ```fuse/256s-0.rom``````fuse/256s-1.rom``````fuse/256s-2.rom``````fuse/256s-3.rom``` "); 
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/fuse/");              
            }
            if(args[1] === 'gambatte'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" The 'Use official bootloader' core option must be set to On in order for these BIOS files to be used. ")
                message.author.send(" Game Boy BIOS - Optional ```gb_bios.bin md5sum 32fbbd84168d3482956eb3c5051637f5``` Game Boy Color BIOS - Optional ```gbc_bios.bin md5sum dbfce9db9deaa2567f6a84fde55f9680```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/gambatte/"); 
            }
            if(args[1] === 'gambatte_everyone'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" The 'Use official bootloader' core option must be set to On in order for these BIOS files to be used. ")
                message.author.send(" Game Boy BIOS - Optional ```gb_bios.bin md5sum 32fbbd84168d3482956eb3c5051637f5``` Game Boy Color BIOS - Optional ```gbc_bios.bin md5sum dbfce9db9deaa2567f6a84fde55f9680```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/gambatte/"); 
            }
            if(args[1] === 'gearboy'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gearboy/"); 
            }
            if(args[1] === 'gearboy_everyone'){
                message.channel.send('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gearboy/"); 
            }        
            if(args[1] === 'gearsystem'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gearsystem/"); 
            }
            if(args[1] === 'gearsystem_everyone'){
                message.channel.send('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gearsystem/"); 
            }        
            if(args[1] === 'genesisplusgx'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/genesis_plus_gx/"); 
            }
            if(args[1] === 'genesisplusgx_everyone'){
                message.channel.send('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/genesis_plus_gx/"); 
            }
            if(args[1] === 'gme'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/game_music_emu/"); 
            }
            if(args[1] === 'gme_everyone'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/game_music_emu/"); 
            }
            if(args[1] === 'gpsp'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Game Boy Advance Image - Required ``` gba_bios.bin md5sum a860e8c0b6d573d191e4ec7db1b1e4f6 ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/gpsp/");              
            }
            if(args[1] === 'gpsp_everyone'){
                message.channel.send(" Game Boy Advance Image - Required ``` gba_bios.bin md5sum a860e8c0b6d573d191e4ec7db1b1e4f6 ```");
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gpsp/");              
            }
            if(args[1] === 'gw'){
                message.reply('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gw/");              
            }
            if(args[1] === 'gw_everyone'){
                message.channel.send('Not required. ');
                message.channel.send(" Check out the related link for more details.  https://docs.libretro.com/library/gw/");              
            }
            if(args[1] === 'handy'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(" Lynx Boot Image - Optional ``` lynxboot.img md5sum fcd403db69f54290b51035d82f835e7b ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/handy/");              
            }
            if(args[1] === 'handy_everyone'){
                message.author.send(" Lynx Boot Image - Optional ``` lynxboot.img md5sum fcd403db69f54290b51035d82f835e7b ```");
                message.author.send(" Check out the related link for more details.  https://docs.libretro.com/library/handy/");              
            }        
            if(args[1] === 'TEST'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' Panasonic FZ-1 ```panafz1.bin   md5sum f47264dd47fe30f73ab3c010015c155b``` Panasonic FZ-10 ```panafz10.bin  md5sum 51f2f43ae2f3508a14d9f56597e2d3ce``` Panasonic FZ-10 [RSA Patch] ```panafz10-patched.bin md5sum 1477bda80dc33731a65468c1f5bcbee9``` Panasonic FZ-10-E [Anvil] ```panafz10e-anvil.bin md5sum a48e6746bd7edec0f40cff078f0bb19f``` Panasonic FZ-10-E [Anvil RSA Patch] ```panafz10e-anvil-patched.bin md5sum cf11bbb5a16d7af9875cca9de9a15e09``` Goldstar GDO-101M ```goldstar.bin md5sum 8639fd5e549bd6238cfee79e3e749114``` Sanyo IMP-21J TRY ```sanyotry.bin md5sum 35fa1a1ebaaeea286dc5cd15487c13ea``` Shootout At Old Tucson ```3do_arcade_saot.bin md5sum 8970fc987ab89a7f64da9f8a8c4333ff``` ');
            }
        
            break;
        case 'nightly':
            if(args[1] === 'windows10x64'){
                message.reply('I sent you a DM, check it out! ');
                message.author.send(' http://buildbot.libretro.com/nightly/windows/x86_64/RetroArch-x64-setup.exe ');
            }
            if(args[1] === 'windows10x64zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/windows/x86_64/RetroArch.7z ');
            }              
            if(args[1] === 'windows10x86'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/windows/x86/RetroArch-x86-setup.exe ');
            }
            if(args[1] === 'windows10x86zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/windows/x86/RetroArch.7z ');
            }
            if(args[1] === 'vita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'playstationvita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'psv'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'playstation2'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/ps2/latest/ ');
            }
            if(args[1] === 'ps2'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/ps2/latest/ ');
            }
            if(args[1] === 'playstationportable'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/psp/ ');
            }
            if(args[1] === 'psp'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/psp/ ');
            }          
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/wiiu/libretro_wiiu.a.7z & http://buildbot.libretro.com/nightly/nintendo/wiiu/retroarch_rpx.7z ');
            }
            if(args[1] === 'wii'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/wii/ ');
            }        
            if(args[1] === '3ds'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/3ds/ ');
            }
            if(args[1] === 'ngc'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/ngc/ ');
            }
            if(args[1] === 'ngc'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/ngc/ ');
            }
            if(args[1] === 'switch'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/switch/libnx/ ');
            }        
            break;

        case 'stable':
            if(args[1] === 'windows10x64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/windows/x86_64/RetroArch-x64-setup.exe ');
            }
            if(args[1] === 'windows10x64zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/windows/x86_64/RetroArch.7z ');
            }              
            if(args[1] === 'windows10x86'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/windows/x86/RetroArch-x86-setup.exe ');
            }
            if(args[1] === 'windows10x86zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/windows/x86/RetroArch.7z ');
            }
            if(args[1] === 'vita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/wiiu/libretro_wiiu.a.7z & http://buildbot.libretro.com/nightly/nintendo/wiiu/retroarch_rpx.7z ');
            }
            if(args[1] === 'ps2'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/playstation/ps2/RetroArch_elf.7z ');
            }
            if(args[1] === 'psp'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/playstation/psp/RetroArch.7z' );
            }
            if(args[1] === 'psvita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === '3ds'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/nintendo/3ds/RetroArch_cia.7z & http://buildbot.libretro.com/stable/1.8.1/nintendo/3ds/RetroArch_3dsx.7z ');
            }
            if(args[1] === 'ngc'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/nintendo/ngc/2019-09-08_RetroArch.7z ');
            }
            if(args[1] === 'switch'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/nintendo/switch/libnx/RetroArch.7z ');
            }
            if(args[1] === 'wii'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/nintendo/wii/RetroArch.7z ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/nintendo/wiiu/RetroArch.7z & http://buildbot.libretro.com/stable/1.8.1/nintendo/wiiu/RetroArch_rpx.7z ');
            }
            if(args[1] === 'ios'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/ios/RetroArch.ipa ');
            }
            if(args[1] === 'osx'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/osx/x86_64/RetroArch.dmg ');
            }
            if(args[1] === 'osxmetal'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/osx/x86_64/RetroArch_Metal.dmg ');
            }
            if(args[1] === 'tvos'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/tvos/RetroArch-tvOS.ipa ');
            }
            if(args[1] === 'tvosold'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/tvos/RetroArch-tvOS-old.ipa ');
            }        
            if(args[1] === 'tvosold'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/apple/tvos/RetroArch-tvOS-old.ipa ');
            }
            if(args[1] === 'android'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/android/RetroArch.apk ');
            }
            if(args[1] === 'android32'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/android/RetroArch_ra32.apk ');
            }
            if(args[1] === 'android64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.8.1/android/RetroArch_aarch64.apk ');
            }        
            break;

       case 'stable178':
            if(args[1] === 'windows10x64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/windows/x86_64/RetroArch-x64-setup.exe ');
            }
            if(args[1] === 'windows10x64zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/windows/x86_64/RetroArch.7z ');
            }              
            if(args[1] === 'windows10x86'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/windows/x86/RetroArch-x86-setup.exe ');
            }
            if(args[1] === 'windows10x86zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/windows/x86/RetroArch.7z ');
            }
            if(args[1] === 'vita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/wiiu/libretro_wiiu.a.7z & http://buildbot.libretro.com/nightly/nintendo/wiiu/retroarch_rpx.7z ');
            }
            if(args[1] === 'ps2'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/playstation/ps2/RetroArch_elf.7z ');
            }
            if(args[1] === 'psp'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/playstation/psp/RetroArch.7z' );
            }
            if(args[1] === 'psvita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === '3ds'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/nintendo/3ds/RetroArch_cia.7z & http://buildbot.libretro.com/stable/1.7.8/nintendo/3ds/RetroArch_3dsx.7z ');
            }
            if(args[1] === 'ngc'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/nintendo/ngc/2019-09-08_RetroArch.7z ');
            }
            if(args[1] === 'switch'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/nintendo/switch/libnx/RetroArch.7z ');
            }
            if(args[1] === 'wii'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/nintendo/wii/RetroArch.7z ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/nintendo/wiiu/RetroArch.7z & http://buildbot.libretro.com/stable/1.7.8/nintendo/wiiu/RetroArch_rpx.7z ');
            }
            if(args[1] === 'ios'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/ios/RetroArch.ipa ');
            }
            if(args[1] === 'osx'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/osx/x86_64/RetroArch.dmg ');
            }
            if(args[1] === 'osxmetal'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/osx/x86_64/RetroArch_Metal.dmg ');
            }
            if(args[1] === 'tvos'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/tvos/RetroArch-tvOS.ipa ');
            }
            if(args[1] === 'tvosold'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/tvos/RetroArch-tvOS-old.ipa ');
            }        
            if(args[1] === 'tvosold'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/apple/tvos/RetroArch-tvOS-old.ipa ');
            }
            if(args[1] === 'android'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/android/RetroArch.apk ');
            }
            if(args[1] === 'android32'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/android/RetroArch_ra32.apk ');
            }
            if(args[1] === 'android64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.8/android/RetroArch_aarch64.apk ');
            }        
            break;        

        case 'stable177':
            if(args[1] === 'windows10x64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/windows/x86_64/RetroArch-x64-setup.exe ');
            }
            if(args[1] === 'windows10x64zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/windows/x86_64/RetroArch.7z ');
            }              
            if(args[1] === 'windows10x86'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/windows/x86/RetroArch-x86-setup.exe ');
            }
            if(args[1] === 'windows10x86zip'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/windows/x86/RetroArch.7z ');
            }
            if(args[1] === 'vita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/nightly/nintendo/wiiu/libretro_wiiu.a.7z & http://buildbot.libretro.com/nightly/nintendo/wiiu/retroarch_rpx.7z ');
            }
            if(args[1] === 'ps2'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/playstation/ps2/RetroArch_elf.7z ');
            }
            if(args[1] === 'psp'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/playstation/psp/RetroArch.7z' );
            }
            if(args[1] === 'psvita'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/playstation/vita/RetroArch.vpk ');
            }
            if(args[1] === '3ds'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/nintendo/3ds/RetroArch_cia.7z & http://buildbot.libretro.com/stable/1.7.8/nintendo/3ds/RetroArch_3dsx.7z ');
            }
            if(args[1] === 'ngc'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/nintendo/ngc/2019-09-08_RetroArch.7z ');
            }
            if(args[1] === 'switch'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/nintendo/switch/libnx/RetroArch.7z ');
            }
            if(args[1] === 'wii'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/nintendo/wii/RetroArch.7z ');
            }
            if(args[1] === 'wiiu'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/nintendo/wiiu/RetroArch.7z & http://buildbot.libretro.com/stable/1.7.8/nintendo/wiiu/RetroArch_rpx.7z ');
            }
            if(args[1] === 'ios'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/apple/ios/RetroArch.ipa ');
            }
            if(args[1] === 'osx'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/apple/osx/x86_64/RetroArch.dmg ');
            }
            if(args[1] === 'osxmetal'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/apple/osx/x86_64/RetroArch_Metal.dmg ');
            }
            if(args[1] === 'android'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/android/RetroArch.apk ');
            }
            if(args[1] === 'android64'){
                message.channel.sendMessage(' http://buildbot.libretro.com/stable/1.7.7/android/RetroArch_aarch64.apk ');
            }        
            break;
            
        case 'windowsx86':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bnes_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bnes_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_hd_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_hd_libretro.dll.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_accuracy_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_accuracy_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_balanced_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_balanced_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_cplusplus98_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_cplusplus98_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_accuracy_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_accuracy_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_balanced_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_balanced_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_performance_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_mercury_performance_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_performance_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/bsnes_performance_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0x4682B4)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/4do_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/4do_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for Windows")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/atari800_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/atari800_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/cap32_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/cap32_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/desmume_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/desmume_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0x4682B4)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/windows/x86/latest/fbalpha2012_libretro.dll.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/windows/x86/latest/fbalpha2012_cps1_libretro.dll.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/windows/x86/latest/fbalpha2012_cps2_libretro.dll.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/windows/x86/latest/fbalpha2012_neogeo_libretro.dll.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/fbalpha_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/fbneo_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/fceumm_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/fceumm_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/flycast_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/flycast_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/fuse_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/fuse_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gambatte_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gambatte_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gearboy_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gearboy_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gearsystem_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gearsystem_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/genesis_plus_gx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/genesis_plus_gx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gme_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gme_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gpsp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gpsp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/gw_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/gw_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/handy_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/handy_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/hatari_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/hatari_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame2000_libretro.dll.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame2003_plus_libretro.dll.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame2010_libretro.dll.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame2015_libretro.dll.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame2016_libretro.dll.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/windows/x86/latest/mame_libretro.dll.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_gba_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_gba_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_lynx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_lynx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_ngp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_ngp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_pce_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_pce_fast_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_pcfx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_pcfx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and Windows.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_psx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_psx_hw_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_psx_hw_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_saturn_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_saturn_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_snes_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_snes_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_supergrafx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_supergrafx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_vb_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_vb_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_wswan_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mednafen_wswan_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/melonds_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/melonds_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Windows and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86/latest/mesen_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86/latest/mesen-s_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mesen-s_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/meteor_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/meteor_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mgba_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mgba_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/mrboom_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/mrboom_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/windows/x86/latest/mupen64plus_libretro.dll.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/windows/x86/latest/mupen64plus_next_libretro.dll.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/windows/x86/latest/mupen64plus_libretro.dll.zip','http://buildbot.libretro.com/nightly/windows/x86/latest/mupen64plus_next_libretro.dll.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/nestopia_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/nestopia_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/np2kai_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/np2kai_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/nxengine_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/nxengine_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/o2em_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/o2em_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/openlara_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/openlara_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/parallel_n64_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/parallel_n64_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/pcsx_rearmed_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/pcsx_rearmed_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/picodrive_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/picodrive_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/pocketcdg_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/pocketcdg_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/pokemini_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/pokemini_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, Windows, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/ppsspp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/ppsspp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/prboom_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/prboom_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/prosystem_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/prosystem_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/px68k_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/px68k_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/quicknes_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/quicknes_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/redbook_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/redbook_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/reminiscence_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/reminiscence_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/reminiscence_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/reminiscence_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2002_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2002_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2005_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2005_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2005_plus_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2005_plus_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2010_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/snes9x2010_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/windows/x86/latest/stella_libretro.dll.zip','http://buildbot.libretro.com/nightly/windows/x86/latest/stella2014_libretro.dll.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86/latest/stella2014_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/tgbdual_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/tgbdual_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/theodore_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/theodore_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/tic80_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/tic80_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/tyrquake_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/tyrquake_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/ume2015_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vba_next_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vba_next_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vbam_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vbam_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vecx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vecx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_x64_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_x64_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64sc_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64sc_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_x128.libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_x128.libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xpet_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xpet_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xplus4_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xplus4_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xvic_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/vice_xvic_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/virtualjaguar_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/virtualjaguar_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/xrick_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/xrick_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/yabasanshiro_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/yabasanshiro_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/yabause_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/yabause_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/2048_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/2048_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }

        break;
case 'windowsx64':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bnes_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bnes_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_hd_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_hd_libretro.dll.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_accuracy_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_accuracy_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_balanced_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_balanced_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_cplusplus98_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_cplusplus98_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_accuracy_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_accuracy_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_balanced_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_balanced_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_performance_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_mercury_performance_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0x4682B4)
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_performance_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/bsnes_performance_libretro.dll.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0x4682B4)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/4do_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/4do_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for Windows")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/atari800_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/atari800_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/cap32_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/cap32_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/desmume_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/desmume_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0x4682B4)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbalpha2012_libretro.dll.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbalpha2012_cps1_libretro.dll.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbalpha2012_cps2_libretro.dll.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbalpha2012_neogeo_libretro.dll.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbalpha_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fbneo_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                 .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fceumm_libretro.dll.zip')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fceumm_libretro.dll.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/flycast_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/flycast_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fuse_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/fuse_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gambatte_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gambatte_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gearboy_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gearboy_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gearsystem_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gearsystem_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/genesis_plus_gx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/genesis_plus_gx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gme_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gme_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gpsp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gpsp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gw_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/gw_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/handy_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/handy_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/hatari_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/hatari_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame2000_libretro.dll.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame2003_plus_libretro.dll.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame2010_libretro.dll.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame2015_libretro.dll.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame2016_libretro.dll.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mame_libretro.dll.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_gba_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_gba_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_lynx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_lynx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_ngp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_ngp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_pce_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_pce_fast_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }        
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_pcfx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_pcfx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and Windows.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_psx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_psx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_psx_hw_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_psx_hw_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_saturn_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_saturn_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_snes_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_snes_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_supergrafx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_supergrafx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_vb_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_vb_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_wswan_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mednafen_wswan_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/melonds_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/melonds_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Windows and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Mesen", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mesen_libretro.dll.zip")
                    .addField("Mesen-S", "http://buildbot.libretro.com/nightly/windows/x86_64/latest/mesen-s_libretro.dll.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/windows/x86_64/latest/mesen_libretro.dll.zip','http://buildbot.libretro.com/nightly/windows/x86_64/latest/mesen-s_libretro.dll.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/meteor_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/meteor_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mgba_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mgba_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mrboom_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mrboom_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mupen64plus_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                    const embed = new RichEmbed()
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/windows/x86_64/latest/mupen64plus_next_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/nestopia_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/nestopia_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/np2kai_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/np2kai_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/nxengine_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/nxengine_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/o2em_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/o2em_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/openlara_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/openlara_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/parallel_n64_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/parallel_n64_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pcsx_rearmed_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pcsx_rearmed_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/picodrive_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/picodrive_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pocketcdg_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pocketcdg_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pokemini_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/pokemini_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, Windows, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/ppsspp_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/ppsspp_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/prboom_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/prboom_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/prosystem_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/prosystem_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/px68k_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/px68k_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/quicknes_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/quicknes_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/redbook_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/redbook_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/reminiscence_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/reminiscence_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/reminiscence_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/reminiscence_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x_libretro.dll.zip')                    
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2002_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2002_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2005_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2005_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2005_plus_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2005_plus_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 Plus from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2010_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/snes9x2010_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/stella_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/stella2014_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tgbdual_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tgbdual_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/theodore_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/theodore_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tic80_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tic80_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tyrquake_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/tyrquake_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/ume2015_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vba_next_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vba_next_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vbam_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vbam_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vecx_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vecx_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64sc_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x64sc_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x128.libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_x128.libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xpet_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xpet_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xplus4_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xplus4_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0x4682B4)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xvic_libretro.dll.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/vice_xvic_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }       
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/virtualjaguar_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/virtualjaguar_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/xrick_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/xrick_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/yabasanshiro_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/yabasanshiro_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/yabause_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/yabause_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/windows/x86_64/latest/2048_libretro.dll.zip')
                    .setURL('http://buildbot.libretro.com/nightly/windows/x86_64/latest/2048_libretro.dll.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
      break;
case 'ps2':
        
              if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
              .addField('Licence', "GPLv2")
              .addField('Extensions', "```.fds .nes .unif .unf```")
              .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0x4682B4)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_fceumm.elf.zip')
                .setURL('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_fceumm.elf.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_mgba.elf.zip')
                    .setURL('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_mgba.elf.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_picodrive.elf.zip')
                    .setURL('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_picodrive.elf.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_quicknes.elf.zip')
                    .setURL('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_quicknes.elf.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0x4682B4)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_2048.elf.zip')
                    .setURL('http://buildbot.libretro.com/nightly/playstation/ps2/latest/retroarchps2_2048.elf.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
          }
  
          
      break;
case 'switch':
            if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF0000)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/4do_libretro_libnx.nro.zip')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/4do_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('This is a port of 2048, a game, to libretro.')  
                .addField('Invader', "Gabriele Cirulli")
                .addField("Request",
                "2048 for RetroArch")
                .addField('Licence', "Public Domain")
                .addField("Docs", "https://docs.libretro.com/library/2048/")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/windows/x86/latest/2048_libretro_libnx.nro.zip')
                .attachFile('http://buildbot.libretro.com/nightly/windows/x86/latest/2048_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                    } 
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/cap32_libretro_libnx.nro.zip')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/cap32_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }                                                                                                                           
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/desmume_libretro_libnx.nro.zip')
                
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF0000)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbalpha2012_libretro_libnx.nro.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbalpha2012_cps1_libretro_libnx.nro.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbalpha2012_cps2_libretro_libnx.nro.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbalpha2012_neogeo_libretro_libnx.nro.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbalpha_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fbneo_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fceumm_libretro_libnx.nro.zip')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fceumm_libretro_libnx.nro.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF0000)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fuse_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/fuse_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gambatte_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gambatte_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gearboy_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gearboy_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gearsystem_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gearsystem_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/genesis_plus_gx_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/genesis_plus_gx_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gme_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gme_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gw_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/gw_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/handy_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/handy_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_lynx_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_lynx_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_ngp_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_ngp_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }    
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_supergrafx_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_supergrafx_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_vb_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_vb_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_wswan_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mednafen_wswan_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/melonds_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/melonds_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mgba_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mgba_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mrboom_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mrboom_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mupen64plus_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mupen64plus_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mupen64 Plus Next from Buildbot')
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mupen64plus_next_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/mupen64plus_next_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/nestopia_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/np2kai_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/np2kai_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/nxengine_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/nxengine_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/o2em_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/o2em_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pcsx_rearmed_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pcsx_rearmed_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/picodrive_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/picodrive_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pocketcdg_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pocketcdg_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pokemini_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/pokemini_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, Windows, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/ppsspp_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/ppsspp_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/prboom_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/prboom_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/prosystem_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/prosystem_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/px68k_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/px68k_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/quicknes_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/quicknes_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/reminiscence_libretro_libnx.nro.zip')
                    .attachFile ('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/reminiscence_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setURL('Click here to download Snes9x 2010 form Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/snes9x_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/snes9x_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot') 
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/snes9x2010_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/snes9x2010_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/stella_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/stella_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella from Buildbot') 
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/stella2014_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/stella2014_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                         
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF00000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/tgbdual_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/tgbdual_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF00000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/theodore_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/theodore_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF00000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/tyrquake_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/tyrquake_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vba_next_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vba_next_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vecx_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vecx_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_x64_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_x64sc_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_x64sc_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_x128_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_x128_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xpet_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xpet_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xplus4_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xplus4_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xvic_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/vice_xvic_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/virtualjaguar_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/virtualjaguar_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/xrick_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/xrick_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/yabause_libretro_libnx.nro.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/switch/libnx/latest/yabause_libretro_libnx.nro.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
      break;     
case 'wiiu':      
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for Windows")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/atari800_libretro.rpx.zip')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/atari800_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/cap32_libretro.rpx.zip')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/cap32_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fbalpha_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }
        if(args[1] === 'fbalpha'){  
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF0000)
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fbalpha2012_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                } 
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fbneo_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .setColor(0xFF0000)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fceumm_libretro.rpx.zip')
                .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fceumm_libretro.rpx.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF0000)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fuse_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/fuse_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gambatte_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gambatte_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gearboy_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gearboy_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gearsystem_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gearsystem_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/genesis_plus_gx_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/genesis_plus_gx_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gw_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/gw_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/hatari_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/hatari_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame2000_libretro.rpx.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame2003_plus_libretro.rpx.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame2010_libretro.rpx.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame2015_libretro.rpx.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame2016_libretro.rpx.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mame_libretro.rpx.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_lynx_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_lynx_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_ngp_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_ngp_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_pce_fast_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
     
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_supergrafx_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_supergrafx_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_vb_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_vb_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_wswan_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mednafen_wswan_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mgba_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mgba_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mrboom_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/mrboom_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                       
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/nestopia_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/nestopia_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/np2kai_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/np2kai_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/nxengine_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/nxengine_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/o2em_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/o2em_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/pokemini_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/pokemini_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/prboom_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/prboom_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/quicknes_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/quicknes_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/reminiscence_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/reminiscence_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')                    
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')   
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2002_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2002_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')   
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2005_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2005_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')   
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2005_plus_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2005_plus_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')   
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2010_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/snes9x2010_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')                    
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/stella_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/stella_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/stella2014_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/stella2014_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/tgbdual_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/tgbdual_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/theodore_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/theodore_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/tyrquake_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/tyrquake_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vba_next_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vba_next_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF0000)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vecx_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vecx_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_x64_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_x64_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_x128_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_x128_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'vice'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xpet_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xpet_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xplus4_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xplus4_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF0000)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xvic_libretro.rpx.zip')
                    .setURL('http://buildbot.libretro.com/nightly/nintendo/wiiu/latest/vice_xvic_libretro.rpx.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
      break;

    case 'linuxx86':
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_hd_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_hd_libretro.so.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_cplusplus98_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_cplusplus98_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_mercury_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/bsnes_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/4do_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/4do_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/atari800_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/atari800_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/cap32_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/cap32_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/desmume_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/desmume_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/linux/x86/latest/fbalpha2012_libretro.so.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/linux/x86/latest/fbalpha2012_cps1_libretro.so.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/linux/x86/latest/fbalpha2012_cps2_libretro.so.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/linux/x86/latest/fbalpha2012_neogeo_libretro.so.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/fbalpha_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/fbneo_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/fceumm_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/fceumm_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/flycast_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/flycast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/fuse_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/fuse_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gambatte_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gambatte_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gearboy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gearboy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gearsystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gearsystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/genesis_plus_gx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/genesis_plus_gx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gme_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gme_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gpsp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gpsp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/gw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/gw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/handy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/handy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/hatari_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/hatari_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame2000_libretro.so.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame2003_plus_libretro.so.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame2010_libretro.so.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame2015_libretro.so.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame2016_libretro.so.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/linux/x86/latest/mame_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_gba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_gba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_lynx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_lynx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_ngp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_ngp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_pce_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_pce_fast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_pcfx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_pcfx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_psx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_psx_hw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_psx_hw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_saturn_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_saturn_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_snes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_snes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_supergrafx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_supergrafx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_vb_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_vb_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_wswan_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mednafen_wswan_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/melonds_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/melonds_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86/latest/mesen_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86/latest/mesen-s_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mesen-s_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/meteor_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/meteor_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mgba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mgba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/mrboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/mrboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/linux/x86/latest/mupen64plus_libretro.so.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/linux/x86/latest/mupen64plus_next_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/x86/latest/mupen64plus_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/x86/latest/mupen64plus_next_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/nestopia_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/nestopia_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/np2kai_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/np2kai_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/nxengine_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/nxengine_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/o2em_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/o2em_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/openlara_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/openlara_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/parallel_n64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/parallel_n64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/pcsx_rearmed_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/pcsx_rearmed_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/picodrive_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/picodrive_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/pocketcdg_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/pocketcdg_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/pokemini_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/pokemini_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/ppsspp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/ppsspp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/prboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/prboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/prosystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/prosystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/px68k_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/px68k_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/quicknes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/quicknes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/redbook_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/redbook_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2002_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2002_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2005_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2005_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2005_plus_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2005_plus_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2010_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/snes9x2010_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/x86/latest/stella_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/x86/latest/stella2014_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86/latest/stella2014_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/tgbdual_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/tgbdual_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/theodore_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/theodore_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/tic80_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/tic80_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/tyrquake_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/tyrquake_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/ume2015_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vba_next_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vba_next_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vbam_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vbam_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vecx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vecx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x64sc_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x64sc_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x128.libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_x128.libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xpet_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xpet_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xplus4_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xplus4_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xvic_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/vice_xvic_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/xrick_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/xrick_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/yabasanshiro_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/yabasanshiro_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/yabause_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/yabause_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86/latest/2048_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86/latest/2048_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
            break;
    
    case 'linuxx64':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bnes_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bnes_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_hd_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_hd_libretro.so.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_cplusplus98_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_cplusplus98_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_mercury_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/bsnes_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/4do_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/4do_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/atari800_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/atari800_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/cap32_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/cap32_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/desmume_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/desmume_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbalpha2012_libretro.so.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbalpha2012_cps1_libretro.so.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbalpha2012_cps2_libretro.so.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbalpha2012_neogeo_libretro.so.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbalpha_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fbneo_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fceumm_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fceumm_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/flycast_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/flycast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fuse_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/fuse_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gambatte_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gambatte_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gearboy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gearboy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gearsystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gearsystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/genesis_plus_gx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/genesis_plus_gx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gme_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gme_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gpsp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gpsp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/gw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/handy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/handy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/hatari_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/hatari_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame2000_libretro.so.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame2003_plus_libretro.so.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame2010_libretro.so.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame2015_libretro.so.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame2016_libretro.so.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mame_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_gba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_gba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_lynx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_lynx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_ngp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_ngp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_pce_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_pce_fast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_pcfx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_pcfx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_psx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_psx_hw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_psx_hw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_saturn_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_saturn_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_snes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_snes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_supergrafx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_supergrafx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_vb_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_vb_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_wswan_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mednafen_wswan_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/melonds_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/melonds_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mesen_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mesen-s_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mesen-s_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/meteor_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/meteor_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mgba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mgba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mrboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/mrboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mupen64plus_libretro.so.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/linux/x86_64/latest/mupen64plus_next_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/x86_64/latest/mupen64plus_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/x86_64/latest/mupen64plus_next_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/nestopia_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/nestopia_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/np2kai_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/np2kai_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/nxengine_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/nxengine_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/o2em_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/o2em_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/openlara_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/openlara_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/parallel_n64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/parallel_n64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pcsx_rearmed_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pcsx_rearmed_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/picodrive_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/picodrive_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pocketcdg_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pocketcdg_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pokemini_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/pokemini_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/ppsspp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/ppsspp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/prboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/prboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/prosystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/prosystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/px68k_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/px68k_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/quicknes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/quicknes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/redbook_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/redbook_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2002_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2002_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2005_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2005_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2005_plus_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2005_plus_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2010_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/snes9x2010_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/x86_64/latest/stella_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/x86_64/latest/stella2014_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/x86_64/latest/stella2014_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tgbdual_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tgbdual_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/theodore_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/theodore_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tic80_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tic80_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tyrquake_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/tyrquake_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/ume2015_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vba_next_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vba_next_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vbam_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vbam_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vecx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vecx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x64sc_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x64sc_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x128.libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_x128.libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xpet_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xpet_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xplus4_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xplus4_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xvic_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/vice_xvic_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/xrick_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/xrick_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/yabasanshiro_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/yabasanshiro_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/yabause_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/yabause_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/x86_64/latest/2048_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/x86_64/latest/2048_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
        break;

case 'armv7':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bnes_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bnes_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_hd_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_hd_libretro.so.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_cplusplus98_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_cplusplus98_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_mercury_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/bsnes_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/4do_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/4do_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/atari800_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/atari800_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/cap32_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/cap32_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/desmume_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/desmume_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbalpha2012_libretro.so.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbalpha2012_cps1_libretro.so.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbalpha2012_cps2_libretro.so.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbalpha2012_neogeo_libretro.so.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbalpha_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fbneo_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fceumm_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fceumm_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/flycast_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/flycast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fuse_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/fuse_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gambatte_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gambatte_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gearboy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gearboy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gearsystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gearsystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/genesis_plus_gx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/genesis_plus_gx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gme_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gme_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gpsp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gpsp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/gw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/handy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/handy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/hatari_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/hatari_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame2000_libretro.so.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame2003_plus_libretro.so.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame2010_libretro.so.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame2015_libretro.so.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame2016_libretro.so.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mame_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_gba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_gba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_lynx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_lynx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_ngp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_ngp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_pce_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_pce_fast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_pcfx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_pcfx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_psx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_psx_hw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_psx_hw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_saturn_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_saturn_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_snes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_snes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_supergrafx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_supergrafx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_vb_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_vb_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_wswan_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mednafen_wswan_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/melonds_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/melonds_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mesen_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mesen-s_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mesen-s_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/meteor_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/meteor_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mgba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mgba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mrboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mrboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mupen64plus_libretro.so.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mupen64plus_next_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mupen64plus_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/mupen64plus_next_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/nestopia_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/nestopia_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/np2kai_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/np2kai_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/nxengine_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/nxengine_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/o2em_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/o2em_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/openlara_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/openlara_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/parallel_n64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/parallel_n64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pcsx_rearmed_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pcsx_rearmed_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/picodrive_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/picodrive_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pocketcdg_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pocketcdg_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pokemini_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/pokemini_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/ppsspp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/ppsspp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/prboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/prboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/prosystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/prosystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/px68k_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/px68k_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/quicknes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/quicknes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/redbook_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/redbook_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2002_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2002_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2005_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2005_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2005_plus_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2005_plus_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2010_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/snes9x2010_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/stella_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/stella2014_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/stella2014_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tgbdual_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tgbdual_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/theodore_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/theodore_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tic80_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tic80_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tyrquake_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/tyrquake_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/ume2015_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vba_next_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vba_next_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vbam_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vbam_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vecx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vecx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x64sc_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x64sc_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x128.libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_x128.libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xpet_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xpet_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xplus4_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xplus4_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xvic_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/vice_xvic_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/xrick_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/xrick_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/yabasanshiro_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/yabasanshiro_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/2048_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armv7-neon-hf/latest/2048_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  

        break;

case 'armhf':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bnes_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bnes_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_hd_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_hd_libretro.so.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_cplusplus98_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_cplusplus98_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_accuracy_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_accuracy_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_balanced_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_balanced_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_mercury_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_performance_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/bsnes_performance_libretro.so.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/4do_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/4do_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/atari800_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/atari800_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/cap32_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/cap32_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/desmume_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/desmume_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/linux/armhf/latest/fbalpha2012_libretro.so.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/linux/armhf/latest/fbalpha2012_cps1_libretro.so.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/linux/armhf/latest/fbalpha2012_cps2_libretro.so.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/linux/armhf/latest/fbalpha2012_neogeo_libretro.so.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/fbalpha_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/fbneo_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/fceumm_libretro.so.zip')
                .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/fceumm_libretro.so.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/flycast_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/flycast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/fuse_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/fuse_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gambatte_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gambatte_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gearboy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gearboy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gearsystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gearsystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/genesis_plus_gx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/genesis_plus_gx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gme_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gme_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gpsp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gpsp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/gw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/gw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/handy_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/handy_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/hatari_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/hatari_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame2000_libretro.so.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame2003_plus_libretro.so.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame2010_libretro.so.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame2015_libretro.so.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame2016_libretro.so.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mame_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_gba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_gba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_lynx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_lynx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_ngp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_ngp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_pce_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_pce_fast_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_pcfx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_pcfx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_psx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_psx_hw_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_psx_hw_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_saturn_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_saturn_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_snes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_snes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_supergrafx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_supergrafx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_vb_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_vb_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_wswan_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mednafen_wswan_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/melonds_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/melonds_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armhf/latest/mesen_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armhf/latest/mesen-s_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mesen-s_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/meteor_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/meteor_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mgba_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mgba_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/mrboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/mrboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mupen64plus_libretro.so.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/linux/armhf/latest/mupen64plus_next_libretro.so.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/armhf/latest/mupen64plus_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/armhf/latest/mupen64plus_next_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/nestopia_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/nestopia_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/np2kai_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/np2kai_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/nxengine_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/nxengine_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/o2em_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/o2em_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/openlara_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/openlara_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/parallel_n64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/parallel_n64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/pcsx_rearmed_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/pcsx_rearmed_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/picodrive_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/picodrive_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/pocketcdg_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/pocketcdg_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/pokemini_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/pokemini_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/ppsspp_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/ppsspp_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/prboom_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/prboom_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/prosystem_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/prosystem_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/px68k_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/px68k_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/quicknes_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/quicknes_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/redbook_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/redbook_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/reminiscence_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/reminiscence_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2002_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2002_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2005_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2005_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2005_plus_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2005_plus_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2010_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/snes9x2010_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/linux/armhf/latest/stella_libretro.so.zip','http://buildbot.libretro.com/nightly/linux/armhf/latest/stella2014_libretro.so.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/linux/armhf/latest/stella2014_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/tgbdual_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/tgbdual_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/theodore_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/theodore_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/tic80_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/tic80_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/tyrquake_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/tyrquake_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/ume2015_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vba_next_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vba_next_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vbam_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vbam_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vecx_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vecx_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x64_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x64_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x64sc_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x64sc_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x128.libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_x128.libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xpet_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xpet_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xplus4_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xplus4_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xvic_libretro.so.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/vice_xvic_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/xrick_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/xrick_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/yabasanshiro_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/yabasanshiro_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/virtualjaguar_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/virtualjaguar_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/linux/armhf/latest/2048_libretro.so.zip')
                    .setURL('http://buildbot.libretro.com/nightly/linux/armhf/latest/2048_libretro.so.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  

        break;

case 'ios':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bnes_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bnes_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_hd_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_hd_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/bsnes_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/4do_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/4do_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/atari800_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/atari800_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/cap32_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/cap32_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/desmume_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/desmume_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/apple/ios/latest/fbalpha2012_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/apple/ios/latest/fbalpha2012_cps1_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/apple/ios/latest/fbalpha2012_cps2_libretro_ios.dylib.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/apple/ios/latest/fbalpha2012_neogeo_libretro_ios.dylib.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/fbalpha_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/fbneo_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/fceumm_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/fceumm_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/flycast_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/flycast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/fuse_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/fuse_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gambatte_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gambatte_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gearboy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gearboy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gearsystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gearsystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gme_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gme_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gpsp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gpsp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/gw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/gw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/handy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/handy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/hatari_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/hatari_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame2000_libretro_ios.dylib.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame2003_plus_libretro_ios.dylib.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame2010_libretro_ios.dylib.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame2015_libretro_ios.dylib.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame2016_libretro_ios.dylib.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/apple/ios/latest/mame_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_pce_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_pce_fast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_psx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/melonds_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/melonds_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios/latest/mesen_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios/latest/mesen-s_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mesen-s_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/meteor_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/meteor_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mgba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mgba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/mrboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/mrboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/apple/ios/latest/mupen64plus_libretro_ios.dylib.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/apple/ios/latest/mupen64plus_next_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios/latest/mupen64plus_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios/latest/mupen64plus_next_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/nestopia_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/nestopia_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/np2kai_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/np2kai_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/nxengine_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/nxengine_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/o2em_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/o2em_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/openlara_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/openlara_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/picodrive_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/picodrive_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/pokemini_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/pokemini_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/ppsspp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/ppsspp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/prboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/prboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/prosystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/prosystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/px68k_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/px68k_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/quicknes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/quicknes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/redbook_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/redbook_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios/latest/stella_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios/latest/stella2014_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios/latest/stella2014_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/tgbdual_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/tgbdual_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/theodore_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/theodore_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/tic80_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/tic80_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/tyrquake_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/tyrquake_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/ume2015_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vba_next_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vba_next_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vbam_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vbam_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vecx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vecx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x128.libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_x128.libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xpet_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xpet_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xvic_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/vice_xvic_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/xrick_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/xrick_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios/latest/2048_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios/latest/2048_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  

        break;

case 'ios9':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bnes_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bnes_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_hd_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_hd_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/bsnes_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/4do_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/4do_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/atari800_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/atari800_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/cap32_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/cap32_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/desmume_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/desmume_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/apple/ios9/latest/fbalpha2012_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/apple/ios9/latest/fbalpha2012_cps1_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/apple/ios9/latest/fbalpha2012_cps2_libretro_ios.dylib.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/apple/ios9/latest/fbalpha2012_neogeo_libretro_ios.dylib.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/fbalpha_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/fbneo_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/fceumm_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/fceumm_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/flycast_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/flycast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/fuse_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/fuse_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gambatte_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gambatte_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gearboy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gearboy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gearsystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gearsystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gme_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gme_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gpsp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gpsp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/gw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/gw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/handy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/handy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/hatari_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/hatari_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame2000_libretro_ios.dylib.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame2003_plus_libretro_ios.dylib.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame2010_libretro_ios.dylib.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame2015_libretro_ios.dylib.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame2016_libretro_ios.dylib.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mame_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_pce_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_pce_fast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_psx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/melonds_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/melonds_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios9/latest/mesen_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios9/latest/mesen-s_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mesen-s_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/meteor_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/meteor_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mgba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mgba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/mrboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/mrboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mupen64plus_libretro_ios.dylib.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/apple/ios9/latest/mupen64plus_next_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios9/latest/mupen64plus_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios9/latest/mupen64plus_next_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/nestopia_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/nestopia_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/np2kai_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/np2kai_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/nxengine_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/nxengine_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/o2em_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/o2em_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/openlara_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/openlara_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/picodrive_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/picodrive_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/pokemini_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/pokemini_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/ppsspp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/ppsspp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/prboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/prboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/prosystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/prosystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/px68k_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/px68k_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/quicknes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/quicknes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/redbook_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/redbook_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios9/latest/stella_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios9/latest/stella2014_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios9/latest/stella2014_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/tgbdual_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/tgbdual_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/theodore_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/theodore_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/tic80_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/tic80_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/tyrquake_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/tyrquake_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/ume2015_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vba_next_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vba_next_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vbam_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vbam_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vecx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vecx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x128.libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_x128.libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xpet_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xpet_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xvic_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/vice_xvic_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/xrick_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/xrick_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios9/latest/2048_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios9/latest/2048_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
        
        break;

case 'iosarm64':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bnes_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bnes_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibilty hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.')  
                .addField('Invader', "byuu")
                .addField("Request",
                "Nintendo - SNES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.sfc .smc .bml```")
                .addField("Docs", "https://docs.libretro.com/library/bsnes_accuracy/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_hd_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_hd_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_cplusplus98_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_accuracy_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_balanced_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_mercury_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFF8F27)
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_performance_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/bsnes_performance_libretro_ios.dylib.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFF8F27)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/4do_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/4do_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/atari800_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/atari800_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/cap32_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/cap32_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/desmume_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/desmume_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbalpha2012_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbalpha2012_cps1_libretro_ios.dylib.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbalpha2012_cps2_libretro_ios.dylib.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbalpha2012_neogeo_libretro_ios.dylib.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbalpha_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fbneo_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFF8F27)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fceumm_libretro_ios.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fceumm_libretro_ios.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/flycast_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/flycast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fuse_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/fuse_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gambatte_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gambatte_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gearboy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gearboy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gearsystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gearsystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/genesis_plus_gx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gme_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gme_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gpsp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gpsp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/gw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/handy_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/handy_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/hatari_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/hatari_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame2000_libretro_ios.dylib.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame2003_plus_libretro_ios.dylib.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame2010_libretro_ios.dylib.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame2015_libretro_ios.dylib.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame2016_libretro_ios.dylib.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mame_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_gba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_lynx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_ngp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_pce_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_pce_fast_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_pcfx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_psx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_psx_hw_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_saturn_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_snes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_supergrafx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_vb_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mednafen_wswan_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/melonds_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/melonds_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mesen_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mesen-s_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mesen-s_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/meteor_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/meteor_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mgba_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mgba_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mrboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mrboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mupen64plus'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Mupen64Plus for libretro is the port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus for libretro uses GLideN64 as graphic plugin.')  
                    .addField('Invader', "Hacktarux & Mupen64Plus Team")
                    .addField("Request",
                    "Nintendo 64 for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.n64 .v64 .z64 .bin .u1 .ndd```")
                    .addField("Mupen64Plus", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mupen64plus_libretro_ios.dylib.zip")
                    .addField("Mupen64Plus Next", "http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mupen64plus_next_libretro_ios.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mupen64plus/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mupen64plus_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/mupen64plus_next_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/nestopia_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/nestopia_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/np2kai_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/np2kai_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/nxengine_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/nxengine_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/o2em_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/o2em_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/openlara_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/openlara_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/parallel_n64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pcsx_rearmed_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/picodrive_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/picodrive_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pocketcdg_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pokemini_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/pokemini_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/ppsspp_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/ppsspp_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/prboom_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/prboom_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/prosystem_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/prosystem_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/px68k_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/px68k_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/quicknes_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/quicknes_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'redbook'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Redbook for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/redbook_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/redbook_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/reminiscence_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/reminiscence_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2002_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2005_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 Plus from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2005_plus_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/snes9x2010_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles(['http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/stella_libretro_ios.dylib.zip','http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/stella2014_libretro_ios.dylib.zip'])
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/stella2014_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tgbdual_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tgbdual_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/theodore_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/theodore_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tic80'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TIC-80 is a fantasy computer for making, playing and sharing tiny games.')  
                    .addField('Invader', "Rob Loach")
                    .addField("Request",
                    "TIC-80 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.tic```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tic80_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tic80_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tyrquake_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/tyrquake_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/ume2015_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vba_next_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vba_next_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vbam_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vbam_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vecx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vecx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x64_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x64_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x64sc_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x128.libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_x128.libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xpet_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xpet_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xplus4_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFF8F27)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xvic_libretro_ios.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/vice_xvic_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/xrick_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/xrick_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabasanshiro'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader')
                    .addField("Request",
                    "Sega Saturn for RetroArch")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/yabasanshiro_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/virtualjaguar_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFF8F27)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/2048_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/ios-arm64/latest/2048_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
  
        
        break;
        
case 'osxx86':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bnes_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bnes_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_accuracy_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_accuracy_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_balanced_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_balanced_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_cplusplus98_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_cplusplus98_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_accuracy_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_accuracy_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_balanced_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_balanced_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_performance_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_mercury_performance_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_performance_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/bsnes_performance_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFFFFFF)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/4do_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/4do_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/atari800_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/atari800_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/cap32_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/cap32_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/desmume_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/desmume_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFFFFFF)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbalpha2012_libretro.dylib.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbalpha2012_cps1_libretro.dylib.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbalpha2012_cps2_libretro.dylib.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbalpha2012_neogeo_libretro.dylib.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbalpha_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fbneo_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fceumm_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fceumm_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/flycast_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/flycast_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fuse_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/fuse_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gambatte_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gambatte_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gearboy_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gearboy_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gearsystem_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gearsystem_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/genesis_plus_gx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/genesis_plus_gx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gme_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gme_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gpsp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gpsp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gw_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/gw_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/handy_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/handy_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/hatari_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/hatari_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame2000_libretro.dylib.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame2003_plus_libretro.dylib.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame2010_libretro.dylib.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame2015_libretro.dylib.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame2016_libretro.dylib.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mame_libretro.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_gba_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_gba_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_lynx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_lynx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_ngp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_ngp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pce_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pce_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pce_fast_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pce_fast_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pcfx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_pcfx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_psx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_psx_hw_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_psx_hw_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_saturn_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_saturn_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_snes_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_snes_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_supergrafx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_supergrafx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_vb_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_vb_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_wswan_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mednafen_wswan_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/melonds_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/melonds_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mesen_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mesen-s_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mesen-s_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/meteor_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/meteor_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mgba_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mgba_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mrboom_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/mrboom_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                      
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/nestopia_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/nestopia_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/np2kai_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/np2kai_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/nxengine_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/nxengine_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/o2em_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/o2em_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/openlara_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/openlara_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/parallel_n64_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/parallel_n64_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pcsx_rearmed_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pcsx_rearmed_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download PCSX ReArmed Interpreter from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pcsx_rearmed_interpreter_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pcsx_rearmed_interpreter_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }        
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/picodrive_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/picodrive_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pocketcdg_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pocketcdg_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pokemini_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/pokemini_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/ppsspp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/ppsspp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/prboom_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/prboom_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/prosystem_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/prosystem_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/px68k_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/px68k_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/quicknes_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/quicknes_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/reminiscence_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/reminiscence_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/reminiscence_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/reminiscence_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2002_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2002_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2005_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2005_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2010_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/snes9x2010_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/stella_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/stella2014_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/tgbdual_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/tgbdual_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/theodore_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/theodore_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/tyrquake_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/tyrquake_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/ume2015_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vba_next_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vba_next_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vbam_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vbam_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vecx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vecx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x64_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x64_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x64sc_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x64sc_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x128.libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_x128.libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xpet_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xpet_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xplus4_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xplus4_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xvic_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/vice_xvic_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/virtualjaguar_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/virtualjaguar_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/xrick_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/xrick_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/yabause_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/yabause_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/2048_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86/latest/2048_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }

        break;

case 'osxx64':
            if(args[1] === 'bnes'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Bnes is notable for attempting to emulate the original hardware as accurately as possible through low-level, cycle-accurate emulation and for the associated historical preservation efforts of the SNES platform')  
                .addField('Invader', "byuu & Ryphecha")
                .addField("Request",
                "Nintendo - NES / Famicom for RetroArch")
                .addField('Licence', "GPLv3")
                .addField('Extensions', "```.nes```")
                .addField("Docs", "https://docs.libretro.com/library/bnes/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bnes_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bnes_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_accuracy_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_accuracy_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_balanced_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_balanced_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_cplusplus98_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_cplusplus98_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_accuracy_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_accuracy_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_balanced_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_balanced_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_performance_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_mercury_performance_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }
        if(args[1] === 'bsnes'){
                const embed = new RichEmbed() 
                .setTitle('Click here to download from Buildbot')
                .setColor(0xFFFFFF)
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_performance_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/bsnes_performance_libretro.dylib.zip')
                message.author.sendEmbed(embed)
                }      
        if(args[1] === '4do'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('4DO is an open-source, low-level emulator for the 3DO Game Console based on the FreeDO source code.')  
                .addField('Invader', "JohnnyDude & FreeDO team")
                .addField("Request",
                "3DO for RetroArch")
                .setColor(0xFFFFFF)
                .addField('Licence', "Modified GNU LGPL / Non-commercial")
                .addField('Extensions', "```.iso .bin .chd .cue```")
                .addField("Docs", "https://docs.libretro.com/library/4do/")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005870206976.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/4do_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/4do_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'atari800'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.')  
                .addField('Invader', "Petr Stehlik")
                .addField("Request",
                "Atari 8-bit computer systems and 5200 for linux")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```xfd .atr .atx .cdm .cas .bin .a52 .xex .zip```")
                .addField("Docs", "https://docs.libretro.com/library/atari800/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009749807104.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/atari800_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/atari800_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'cap32'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and linux. The emulator faithfully imitates the CPC464, CPC664, and CPC6128 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.')  
                .addField('Invader', "Ulrich Doewich, David Colmenero (D_Skywalk) & Colin Pitrat")
                .addField("Request",
                "Amstrad - CPC for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.dsk .sna .tap .cdt .voc .m3u .zip```")
                .addField("Docs", "https://docs.libretro.com/library/caprice32/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007619100682.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/cap32_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/cap32_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'desmume'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('DeSmuME is a Nintendo DS emulator.')  
                .addField('Invader', "YopYop156 & Zeromus")
                .addField("Request",
                "Nintendo - DS for RetroArch")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/desmume_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/desmume_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'fbalpha'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FB Alpha is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFFFFFF)
                .addField('FBAlpha 2012', "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbalpha2012_libretro.dylib.zip")
                .addField('FBAlpha CPS1', "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbalpha2012_cps1_libretro.dylib.zip")
                .addField('FBAlpha CPS2', "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbalpha2012_cps2_libretro.dylib.zip")
                .addField('FBAlpha NeoGeo', "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbalpha2012_neogeo_libretro.dylib.zip")
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbalpha_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');                
                }               
        if(args[1] === 'fbneo'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FinalBurn Neo is a Multiple Arcade Emulator most popular for emulating Neo-Geo, Capcom, Konami, and Cave games. It is developed by the FinalBurn team and originated from FinalBurn by Dave and old MAME versions. FinalBurn Neo is an active fork of the FinalBurn Alpha emulator, created by former FBA developers.')  
                .addField('Invader', "FBNeo")
                .addField("Request",
                "Arcade for RetroArch")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008676327425.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fbneo_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                } 
        if(args[1] === 'fceumm'){
                message.reply(' I sent you a DM, check it out! ')
                const embed = new RichEmbed()
                .setTitle('Click here to download from Buildbot')
                .setDescription('FCEU "mappers modified" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROMs.')  
                .addField('Invader', "FCEU Team & CaH4e3")
                .addField("Request",
                "Nintendo - NES for RetroArch")
                .addField('Licence', "GPLv2")
                .addField('Extensions', "```.fds .nes .unif .unf```")
                .addField("Docs", "https://docs.libretro.com/library/fceumm/")
                .setColor(0xFFFFFF)
                .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fceumm_libretro.dylib.zip')
                .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fceumm_libretro.dylib.zip')
                .setTimestamp()
                message.author.sendEmbed(embed)
                message.react('👍');
                }
        if(args[1] === 'flycast'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Flycast is a multi-platform Sega Dreamcast emulator.')  
                    .addField('Invader', "flyinghead")
                    .addField("Request",
                    "Sega Dreamcast for RetroArch")
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/flycast_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/flycast_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    } 
        if(args[1] === 'fuse'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and linux.')  
                    .addField('Invader', message.author.username)
                    .addField("Request",
                    "ZX Spectrum for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail(message.author.avatarURL)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fuse_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/fuse_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                    }
        if(args[1] === 'gambatte'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.')  
                    .addField('Invader', "Sinamas")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gambatte_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gambatte_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearboy is an open source, multi-platform, Nintendo Game Boy (DMG) / Game Boy Color (CGB) emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .dmg .gbc .cgb .sgb``")
                    .addField("Docs", "https://docs.libretro.com/library/gearboy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gearboy_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gearboy_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gearsystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Gearsystem is an open source, multi-platform, Sega Master System / Game Gear / SG-1000 emulator written in C++.')  
                    .addField('Invader', "Ignacio Sanchez")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Extensions', "```.sms .gg .sg .bin .rom```")
                    .addField("Docs", "https://docs.libretro.com/library/gearsystem/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009817178134.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gearsystem_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gearsystem_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'genesisplusgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Genesis Plus GX is an open-source Sega 8/16 bit emulator focused on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified & enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge & systems hardware.')  
                    .addField('Invader', "Charles McDonald & Eke-Eke")
                    .addField("Request",
                    "Sega - MS/GG for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.mdx .md .smd .gen .bin .cue .iso .sms .gg .sg .68k .chd``")
                    .addField("Docs", "https://docs.libretro.com/library/genesis_plus_gx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/genesis_plus_gx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/genesis_plus_gx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gme'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Multi-purpose video game console music player.')  
                    .addField('Invader', "Blargg")
                    .addField("Request",
                    "Game Music for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.ay .gbs .gym .hes .kss nsf .nsfe .sap .spc .vgm .vgz```")
                    .addField("Docs", "https://docs.libretro.com/library/game_music_emu/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gme_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gme_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'gpsp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('gpSP is a Game Boy Advance emulator based on notaz fork of gpSP with additional codebase improvements.')  
                    .addField('Invader', "Exophase")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/gpsp/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gpsp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gpsp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'gw'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A libretro core for Game & Watch simulators. It runs simulators converted from source code for the games available at MADrigal.')  
                    .addField('Invader', "Andre Leiradella")
                    .addField("Request",
                    "Handheld Electronic for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.mgw```")
                    .addField("Docs", "https://docs.libretro.com/library/gw/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009762652176.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gw_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/gw_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'handy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Handy is an Atari Lynx video game system emulator that can be used as a libretro core. Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.')  
                    .addField('Invader', "K. Wilkins")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/handy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/handy_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/handy_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'hatari'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.')  
                    .addField('Invader', "Nicolas Pomarède")
                    .addField("Request",
                    "Atari - ST/STE/TT/Falcon for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.st .msa .zip .stx .dim .ipf```")
                    .addField("Docs", "https://docs.libretro.com/library/hatari/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007568769034.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/hatari_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/hatari_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mame'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.')  
                    .addField('Invader', "MAMEdev")
                    .addField("Request",
                    "Arcade for RetroArch")
                    .addField('Licence', "MAME Non-Commercial")
                    .addField('Extensions', "```.zip .chd .7z```")
                    .addField("MAME2000", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame2000_libretro.dylib.zip")
                    .addField("MAME2003 Plus", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame2003_plus_libretro.dylib.zip")
                    .addField("MAME2010", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame2010_libretro.dylib.zip")
                    .addField("MAME2015", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame2015_libretro.dylib.zip")
                    .addField("MAME2016", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame2016_libretro.dylib.zip")
                    .addField("MAME", "http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mame_libretro.dylib.zip")
                    .addField("Docs", "https://docs.libretro.com/library/mame_2003/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009049489430.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlegba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.')  
                    .addField('Invader', "Forgotten & Mednafen Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba .agb .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_gba/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_gba_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_gba_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlelynx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically its a port of Mednafen Lynx which is a fork of Handy.')  
                    .addField('Invader', "K. Wilkins & Mednafen Team")
                    .addField("Request",
                    "Atari - Lynx for RetroArch")
                    .addField('Licence', "zlib, GPLv2")
                    .addField('Extensions', "```.lnx```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_handy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008890105865.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_lynx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_lynx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlengp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.')  
                    .addField('Invader', "neopop_uk & Mednafen Team")
                    .addField("Request",
                    "SNK - Neo Geo Pocket / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ngp .ngc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_neopop/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008764407808.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_ngp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_ngp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setDescription('Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .cue .ccd .iso .img .bin .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pce_fast/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pce_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pce_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepce'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PCE Fast from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pce_fast_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pce_fast_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlepcfx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC-FX for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .ccd .toc .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_pc_fx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pcfx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_pcfx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Beetle PSX HW is a port/fork of Mednafen PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and linux.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .exe .pbp .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_psx_hw/")
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_psx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlepsx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Beetle PSX HW from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_psx_hw_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_psx_hw_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'beetlesaturn'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of standalone Mednafen Saturn to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Sega - Saturn for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.cue .toc .m3u .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_saturn/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_saturn_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_saturn_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlesnes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.')  
                    .addField('Invader', "byuu & Mednafen Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.smc .fig .bs .st .sfc```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_bsnes/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_snes_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_snes_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'beetlesgx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen PCE Fast to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "NEC - PC Engine SuperGrafx for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pce .sgx .cue .ccd .chd```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_sgx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_supergrafx_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_supergrafx_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlevb'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of Mednafen VB to libretro.')  
                    .addField('Invader', "Mednafen Team")
                    .addField("Request",
                    "Nintendo - Virtual Boy for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.vb .vboy .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_vb/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009548611584.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_vb_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_vb_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'beetlewsan'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.')  
                    .addField('Invader', "Dox & Mednafen Team")
                    .addField("Request",
                    "Bandai - WonderSwan/Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.ws .wsc .pc2 (Benesse Pocket Challenge v2 files)```")
                    .addField("Docs", "https://docs.libretro.com/library/beetle_cygne/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009766584321.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_wswan_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mednafen_wswan_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'melonds'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('An up-and-coming Nintendo DS emulator by StapleButter, ported to libretro.')  
                    .addField('Invader', "StapleButter")
                    .addField("Request",
                    "Nintendo - DS for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nds```")
                    .addField("Docs", "https://docs.libretro.com/library/melonds/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564005429936128.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/melonds_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/melonds_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Mesen is a high-accuracy NES and Famicom emulator and NSF player for Linux and Linux.')  
                    .addField('Invader', "M. Bibaud (aka Sour)")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/mesen/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mesen_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mesen'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Mesen-S from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mesen-s_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mesen-s_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'meteor'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Meteor is a Nintendo Gameboy Advance emulator.')  
                    .addField('Invader', "Philippe Daouadi")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/meteor_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/meteor_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        } 
        if(args[1] === 'mgba'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "endrift")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "MPLv2.0")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/meteor/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mgba_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mgba_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'mrboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.')  
                    .addField('Invader', "Remdy Software")
                    .addField("Request",
                    "Mr.Boom for RetroArch")
                    .addField('Licence', "MIT")
                    .addField("Docs", "https://docs.libretro.com/library/mr_boom/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009896607745.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mrboom_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/mrboom_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                      
        if(args[1] === 'nestopia'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nestopia is a portable and cycle-accurate NES/Famicom emulator written in C++. Nestopia UE (Undead Edition) is a fork of the original source code, with enhancements from members of the emulation community. This includes support for new platforms, and bug fixes in the emulator core.')  
                    .addField('Invader', "Martin Freij, R. Belmont & R. Danbrook")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.nes .fds .unf .unif```")
                    .addField("Docs", "https://docs.libretro.com/library/nestopia_ue/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/nestopia_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/nestopia_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'np2kai'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField('Invader', "Neko Project II Team & Tomohiro Yoshidomi")
                    .addField("Request",
                    "NEC - PC-98 for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.d98 .zip .98d .fdi .fdd .2hd .tfd .d88 .88d .hdm .xdf .dup .cmd .hdi .thd .nhd .hdd .hdn```")
                    .addField("Docs", "https://docs.libretro.com/library/neko_project_ii_kai/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008797700097.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/np2kai_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/np2kai_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'nxengine'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('NXEngine is a open source reproduction of the Cave Story game engine.')  
                    .addField('Invader', "Caitlin Shaw")
                    .addField("Request",
                    "Cave Story for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.exe```")
                    .addField("Docs", "https://docs.libretro.com/library/nxengine/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008864940033.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/nxengine_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/nxengine_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'o2em'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.')  
                    .addField('Invader', "Daniel Boris, Andre de la Rocha & Arlindo M. de Oliveira")
                    .addField("Request",
                    "Magnavox - Odyssey2 / Phillips Videopac+ for RetroArch")
                    .addField('Licence', "Artistic LicensePLv3")
                    .addField('Extensions', "```.bin```")
                    .addField("Docs", "https://docs.libretro.com/library/o2em/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008592310322.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/o2em_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/o2em_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'openlara'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A new work-in-progress Tomb Raider game engine ported to libretro.')  
                    .addField('Invader', "XProger")
                    .addField("Request",
                    "Tomb Raider for RetroArch")
                    .addField('Licence', "2-clause BSD")
                    .addField('Extensions', "```.phd .psx .tr2```")
                    .addField("Docs", "https://docs.libretro.com/library/openlara/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009620045845.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/openlara_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/openlara_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'paralleln64'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')  
                    .addField("Request",
                    "Nintendo N64 for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009686892545.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/parallel_n64_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/parallel_n64_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.')  
                    .addField('Invader', "PCSX Team, notaz & Exophase")
                    .addField("Request",
                    "Sony - PlayStation for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .img .mdf .pbp .toc .cbn .m3u .ccd```")
                    .addField("Docs", "https://docs.libretro.com/library/pcsx_rearmed/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009418719252.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pcsx_rearmed_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pcsx_rearmed_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pcsxrearmed'){
                    const embed = new RichEmbed()
                    .setTitle('Click here to download PCSX ReArmed Interpreter from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pcsx_rearmed_interpreter_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pcsx_rearmed_interpreter_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }        
        if(args[1] === 'picodrive'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.')  
                    .addField('Invader', "notaz & fdave")
                    .addField("Request",
                    "Sega - MS/MD/CD/32X for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.bin .gen .smd .md .32x .cue .iso .sms .68k```")
                    .addField("Docs", "https://docs.libretro.com/library/picodrive/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009997271040.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/picodrive_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/picodrive_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pocketcdg'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A MP3 karaoke music player.')  
                    .addField('Invader', "RedBug")
                    .addField("Request",
                    "Music for RetroArch")
                    .addField('Licence', "MIT")
                    .addField('Extensions', "```.cdg```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pocketcdg_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pocketcdg_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'pokemini'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('PokeMini is an emulator for the Pokémon Mini handheld console.')  
                    .addField('Invader', "JustBurn")
                    .addField("Request",
                    "Nintendo - Pokémon Mini for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.min```")
                    .addField("Docs", "https://docs.libretro.com/library/pocketcdg/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008571207720.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pokemini_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/pokemini_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ppsspp'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('A PSP emulator for Android, linux, Mac and Linux, written in C++.')  
                    .addField('Invader', "Henrik Hrydgard")
                    .addField("Request",
                    "Sony - PlayStation Portable for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.elf .iso .cso .prx .pbp```")
                    .addField("Docs", "https://docs.libretro.com/library/ppsspp/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009204547587.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/ppsspp_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/ppsspp_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prboom'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.')  
                    .addField('Invader', "Florian Schulze")
                    .addField("Request",
                    "Doom for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.wad .iwad .pwad```")
                    .addField("Docs", "https://docs.libretro.com/library/prboom/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564010093871104.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/prboom_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/prboom_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'prosystem'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('ProSystem is an Atari 7800 emulator.')  
                    .addField('Invader', "Greg Stanton, Brian Berlin, Leonis & Greg DeMent")
                    .addField("Request",
                    "Atari - 7800 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/prosystem/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008734916624.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/prosystem_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/prosystem_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'px68k'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Portable SHARP X68000 Emulator for PSP, Android and other platforms.')  
                    .addField('Invader', "hissorii")
                    .addField("Request",
                    "Sharp - X68000 for RetroArch")
                    .addField('Licence', "kero_src")
                    .addField("Licence File", "https://github.com/libretro/px68k-libretro/blob/master/doc/kero_src.txt")
                    .addField('Extensions', "```.a78 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/px68k/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007589871628.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/px68k_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/px68k_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'quicknes'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.')  
                    .addField('Invader', "blargg & kode54")
                    .addField("Request",
                    "Nintendo - NES / Famicom for RetroArch")
                    .addField('Licence', "LGPLv2.1+")
                    .addField('Extensions', "```.nes```")
                    .addField("Docs", "https://docs.libretro.com/library/quicknes/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/quicknes_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/quicknes_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'reminiscence'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stuart Carnie has ported REminiscence ,Gregory Montoir’s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.')  
                    .addField('Invader', "Gregory Montoir & Stuart Carnie")
                    .addField("Request",
                    "Flashback for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.map (DOS Map Data) .aba (DOS (Demo) Map Data) .seq (DOS CD Map Data) .lev (Amiga Map Data)```")
                    .addField("Docs", "https://docs.libretro.com/library/reminiscence/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008458223637.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/reminiscence_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/reminiscence_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'sameboy'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.')  
                    .addField('Invader', "LIJI32")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.gb .gbc```")
                    .addField("Docs", "https://docs.libretro.com/library/sameboy/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/reminiscence_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/reminiscence_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.')  
                    .addField('Invader', "Snes9x Team")
                    .addField("Request",
                    "Nintendo - SNES / Famicom for RetroArch")
                    .addField('Licence', "Non-commercial")
                    .addField('Extensions', "```.smc .sfc .swc .fig .bs```")
                    .addField("Docs", "https://docs.libretro.com/library/snes9x/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009225781269.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2002 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2002_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2002_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2005 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2005_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2005_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'snes9x'){   
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Snes9x 2010 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2010_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/snes9x2010_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                                                                                                
        if(args[1] === 'stella'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Stella is a multi-platform Atari 2600 VCS emulator.')  
                    .addField('Invader', "Stephen Anthony, Bradford Mott, Eckhard Stolberg & Brian Watson")
                    .addField("Request",
                    "Atari - 2600 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.a26 .bin```")
                    .addField("Docs", "https://docs.libretro.com/library/stella/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009703931933.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/stella_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'stella'){  
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Stella 2014 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFiles('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/stella2014_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }                        
        if(args[1] === 'tgbdual'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.')  
                    .addField('Invader', "GIGO & Hii")
                    .addField("Request",
                    "Nintendo - Game Boy / Color for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .sgb```")
                    .addField("Docs", "https://docs.libretro.com/library/tgb_dual/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008281931788.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/tgbdual_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/tgbdual_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'theodore'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Theodore is a Thomson MO/TO system emulator based on Daniel Couloms DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. At the time of this writing, Theodore emulates the following models of the MO/TO family: TO8, TO8D, TO9, TO9+, MO5 and MO6.')  
                    .addField('Invader', "Thomas Lorblanchès")
                    .addField("Request",
                    "Thomson - MO/TO for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.fd (floppy disk) .sap (floppy disk) .k7 (tape) .rom (cartridge) .m7 (cartridge) .m5 (cartridge)```")
                    .addField("Docs", "https://docs.libretro.com/library/theodore/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008516943874.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/theodore_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/theodore_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'tyrquake'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Kevin Shanahan (Tyrann)")
                    .addField("Request",
                    "Quake 1 for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.pak```")
                    .addField("Docs", "https://docs.libretro.com/library/tic80/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009351610369.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/tyrquake_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/tyrquake_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'ume2015'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/ume2015_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbanext'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Libretro port of Tyrquake (Quake 1 engine).')  
                    .addField('Invader', "Forgotten, VBA-M Team & Squarepusher")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_next/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vba_next_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vba_next_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vbam'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette)..')  
                    .addField('Invader', "Forgotten & VBA-M Team")
                    .addField("Request",
                    "Nintendo - Game Boy Advance for RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.gb .gbc .gba```")
                    .addField("Docs", "https://docs.libretro.com/library/vba_m/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564008823128067.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vbam_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vbam_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vecx'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Vecx is an emulator for the vector-display based Vectrex video game console.')  
                    .addField('Invader', "Valavan Manohararajah, John Hawthorn, Nikita Zimin & Demeth")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.bin .vec```")
                    .addField("Docs", "https://docs.libretro.com/library/vecx/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009519120405.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vecx_libretro_ios.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vecx_libretro_ios.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .addField("Request",
                    "Versatile Commodore 8-bit for RetroArch")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564007195475979.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x64_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x64_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x64sc from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x64sc_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x64sc_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice x128 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x128.libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_x128.libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPet from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xpet_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xpet_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xPlus4 from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xplus4_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xplus4_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'vice'){ 
                    const embed = new RichEmbed()
                    .setTitle('Click here to download Vice xVic from Buildbot')
                    .setColor(0xFFFFFF)
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xvic_libretro.dylib.zip')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/vice_xvic_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }      
        if(args[1] === 'virtualjaguar'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.')  
                    .addField('Invader', "David Raingeard & Shamus")
                    .addField("Request",
                    "Vectrex for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.j64 .jag .rom .abs .cof .bin .prg```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009254879232.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/virtualjaguar_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/virtualjaguar_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'xrick'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Xrick is an open source implementation of the game "Rick Dangerous".')  
                    .addField('Invader')
                    .addField("Request",
                    "Rick Dangerous for RetroArch")
                    .addField('Licence', "GPLv3")
                    .addField('Extensions', "```.zip```")
                    .addField("Docs", "https://docs.libretro.com/library/xrick/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009728966672.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/xrick_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/xrick_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === 'yabause'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('Yabause is an active Sega Saturn emulator that is both open-source and written with portability in mind. The libretro port only supports the software renderer at the moment, which is more accurate but also slower than the GL renderer.')  
                    .addField('Invader', "Guillaume Duhammel, Theo Berkau & Anders Montonen")
                    .addField("Request",
                    "Sega - Saturn RetroArch")
                    .addField('Licence', "GPLv2")
                    .addField('Extensions', "```.bin .cue .iso```")
                    .addField("Docs", "https://docs.libretro.com/library/virtual_jaguar/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009888481280.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/yabause_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/yabause_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }
        if(args[1] === '2048'){
                message.reply(' I sent you a DM, check it out! ')
                    const embed = new RichEmbed()
                    .setTitle('Click here to download from Buildbot')
                    .setDescription('This is a port of 2048, a game, to libretro.')  
                    .addField('Invader', "Gabriele Cirulli")
                    .addField("Request",
                    "2048 for RetroArch")
                    .addField('Licence', "Public Domain")
                    .addField("Docs", "https://docs.libretro.com/library/2048/")
                    .setColor(0xFFFFFF)
                    .setThumbnail('https://cdn.discordapp.com/app-assets/475456035851599874/481564009477177344.png')
                    .setFooter('You are downloading the latest version, you may want to back up the previous version to avoid an unexpected situation.')
                    .attachFile('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/2048_libretro.dylib.zip')
                    .setURL('http://buildbot.libretro.com/nightly/apple/osx/x86_64/latest/2048_libretro.dylib.zip')
                    .setTimestamp()
                    message.author.sendEmbed(embed)
                    message.react('👍');
                        }

        break;
    }
  
  
  
  
  
})

bot.login(token); 